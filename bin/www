


var app = require('../app');
var debug = require('debug')('outlet_app:server');
var http = require('http');
var cronJob = require('cron').CronJob;
var queue = require('../routes/checkQueue');
var cvm = require('../routes/cvm');
// Doing the force tcp keepalive
require('node-ka-patch');

var redis = require('redis');
var redisClient = redis.createClient();
redisClient.on('error', function(msg) {
  console.error(msg);
});
var helper = require('../routes/helper');


// global variable to store list of item ids
OUTLET_ITEM_IDS = [];

RUN_COUNT = (new Date()).getTime();

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
server.timeout = 0;
io = require('socket.io')(server);
process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0"


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

server.on('close', function() {
  debug("Server is closing this connection");
})

server.on('clientError', function (exception, socket) {
  debug("An error from client happened- ", exception);
})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
// Starting the cron job to send live stock data every hour
var job = new cronJob('*/30 * * * * *', function(){
  queue.checkCvmOrdeQueue();
  
},
true, /* Start the job right now */
'Asia/Kolkata' /* Time zone of this job. */
);





